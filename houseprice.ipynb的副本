{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "#import mudulous"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "#load data\n",
    "train_data = pd.read_csv('train.csv',index_col=0)\n",
    "test_data = pd.read_csv('test.csv',index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Corner</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "Id                                                                    \n",
       "1           60       RL         65.0     8450   Pave   NaN      Reg   \n",
       "2           20       RL         80.0     9600   Pave   NaN      Reg   \n",
       "3           60       RL         68.0    11250   Pave   NaN      IR1   \n",
       "4           70       RL         60.0     9550   Pave   NaN      IR1   \n",
       "5           60       RL         84.0    14260   Pave   NaN      IR1   \n",
       "\n",
       "   LandContour Utilities LotConfig    ...     PoolArea PoolQC Fence  \\\n",
       "Id                                    ...                             \n",
       "1          Lvl    AllPub    Inside    ...            0    NaN   NaN   \n",
       "2          Lvl    AllPub       FR2    ...            0    NaN   NaN   \n",
       "3          Lvl    AllPub    Inside    ...            0    NaN   NaN   \n",
       "4          Lvl    AllPub    Corner    ...            0    NaN   NaN   \n",
       "5          Lvl    AllPub       FR2    ...            0    NaN   NaN   \n",
       "\n",
       "   MiscFeature MiscVal MoSold  YrSold  SaleType  SaleCondition  SalePrice  \n",
       "Id                                                                         \n",
       "1          NaN       0      2    2008        WD         Normal     208500  \n",
       "2          NaN       0      5    2007        WD         Normal     181500  \n",
       "3          NaN       0      9    2008        WD         Normal     223500  \n",
       "4          NaN       0      2    2006        WD        Abnorml     140000  \n",
       "5          NaN       0     12    2008        WD         Normal     250000  \n",
       "\n",
       "[5 rows x 80 columns]"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x119757b70>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x11932aa90>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11976b128>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "prices = pd.DataFrame({\"price\":train_data[\"SalePrice\"],\"log(price+1)\":np.log1p(train_data[\"SalePrice\"])})\n",
    "prices.hist()\n",
    "#make prices become a frame including original price value and log(price+1) value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train = np.log1p(train_data.pop('SalePrice'))\n",
    "data = pd.concat(((train_data,test_data)),axis=0)\n",
    "#concatenate training data dealed and test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int64')"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#change non-numerical type into str type\n",
    "data['MSSubClass'].dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['MSSubClass']=data['MSSubClass'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20     1079\n",
       "60      575\n",
       "50      287\n",
       "120     182\n",
       "30      139\n",
       "160     128\n",
       "70      128\n",
       "80      118\n",
       "90      109\n",
       "190      61\n",
       "85       48\n",
       "75       23\n",
       "45       18\n",
       "180      17\n",
       "40        6\n",
       "150       1\n",
       "Name: MSSubClass, dtype: int64"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['MSSubClass'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass_120</th>\n",
       "      <th>MSSubClass_150</th>\n",
       "      <th>MSSubClass_160</th>\n",
       "      <th>MSSubClass_180</th>\n",
       "      <th>MSSubClass_190</th>\n",
       "      <th>MSSubClass_20</th>\n",
       "      <th>MSSubClass_30</th>\n",
       "      <th>MSSubClass_40</th>\n",
       "      <th>MSSubClass_45</th>\n",
       "      <th>MSSubClass_50</th>\n",
       "      <th>MSSubClass_60</th>\n",
       "      <th>MSSubClass_70</th>\n",
       "      <th>MSSubClass_75</th>\n",
       "      <th>MSSubClass_80</th>\n",
       "      <th>MSSubClass_85</th>\n",
       "      <th>MSSubClass_90</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    MSSubClass_120  MSSubClass_150  MSSubClass_160  MSSubClass_180  \\\n",
       "Id                                                                   \n",
       "1                0               0               0               0   \n",
       "2                0               0               0               0   \n",
       "3                0               0               0               0   \n",
       "4                0               0               0               0   \n",
       "5                0               0               0               0   \n",
       "\n",
       "    MSSubClass_190  MSSubClass_20  MSSubClass_30  MSSubClass_40  \\\n",
       "Id                                                                \n",
       "1                0              0              0              0   \n",
       "2                0              1              0              0   \n",
       "3                0              0              0              0   \n",
       "4                0              0              0              0   \n",
       "5                0              0              0              0   \n",
       "\n",
       "    MSSubClass_45  MSSubClass_50  MSSubClass_60  MSSubClass_70  MSSubClass_75  \\\n",
       "Id                                                                              \n",
       "1               0              0              1              0              0   \n",
       "2               0              0              0              0              0   \n",
       "3               0              0              1              0              0   \n",
       "4               0              0              0              1              0   \n",
       "5               0              0              1              0              0   \n",
       "\n",
       "    MSSubClass_80  MSSubClass_85  MSSubClass_90  \n",
       "Id                                               \n",
       "1               0              0              0  \n",
       "2               0              0              0  \n",
       "3               0              0              0  \n",
       "4               0              0              0  \n",
       "5               0              0              0  "
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.get_dummies(data['MSSubClass'],prefix='MSSubClass').head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "#one-hot all data\n",
    "data_dummy = pd.get_dummies(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LotFrontage     486\n",
       "GarageYrBlt     159\n",
       "MasVnrArea       23\n",
       "BsmtHalfBath      2\n",
       "BsmtFullBath      2\n",
       "BsmtFinSF2        1\n",
       "GarageCars        1\n",
       "TotalBsmtSF       1\n",
       "BsmtUnfSF         1\n",
       "GarageArea        1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#dealing with numerical data\n",
    "#show the number of NA in feature\n",
    "data_dummy.isnull().sum().sort_values(ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "#compute the mean in each numerical column\n",
    "data_dummy_mean = data_dummy.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LotFrontage        69.305795\n",
       "LotArea         10168.114080\n",
       "OverallQual         6.089072\n",
       "OverallCond         5.564577\n",
       "YearBuilt        1971.312778\n",
       "YearRemodAdd     1984.264474\n",
       "MasVnrArea        102.201312\n",
       "BsmtFinSF1        441.423235\n",
       "BsmtFinSF2         49.582248\n",
       "BsmtUnfSF         560.772104\n",
       "dtype: float64"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_dummy_mean.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SaleCondition_Partial    0\n",
       "Neighborhood_NridgHt     0\n",
       "Neighborhood_SWISU       0\n",
       "Neighborhood_Sawyer      0\n",
       "Neighborhood_SawyerW     0\n",
       "Neighborhood_Somerst     0\n",
       "Neighborhood_StoneBr     0\n",
       "Neighborhood_Timber      0\n",
       "Neighborhood_Veenker     0\n",
       "Condition1_Artery        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fill the NA with mean\n",
    "data_dummy = data_dummy.fillna(data_dummy_mean)\n",
    "data_dummy.isnull().sum().sort_values(ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt',\n",
       "       'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',\n",
       "       'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea',\n",
       "       'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr',\n",
       "       'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt',\n",
       "       'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF',\n",
       "       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n",
       "       'MoSold', 'YrSold'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#dealing with numerical data\n",
    "data_numeric = data.columns[data.dtypes != 'object']\n",
    "data_numeric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculate the standard distribution and make data more smooth\n",
    "#there are many ways to do this including log(data+1)\n",
    "#In this way, use (x-u)/sigma\n",
    "data_dummy_nu_mean=data_dummy.loc[:,data_numeric].mean()\n",
    "data_dummy_nu_sd = data_dummy.loc[:,data_numeric].std()\n",
    "data_dummy.loc[:,data_numeric] = (data_dummy.loc[:,data_numeric]-data_dummy_nu_mean)/data_dummy_nu_sd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Divide data_dummy into train_dummy and test_dummy\n",
    "train_dummy=data_dummy.loc[train_data.index]\n",
    "test_dummy = data_dummy.loc[test_data.index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1459, 303)"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_dummy.shape\n",
    "test_dummy.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import ElasticNet, Lasso, BayesianRidge,LassoLarsIC \n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from sklearn.kernel_ridge import KernelRidge\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import RobustScaler\n",
    "from sklearn.base import BaseEstimator,TransformerMixin,RegressorMixin,clone\n",
    "from sklearn.model_selection import KFold, cross_val_score,train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import xgboost as xgb\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## using cross_val_score\n",
    "washing the dataset prior to cross_validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = train_dummy.values\n",
    "X_test = test_dummy.values\n",
    "y_value = y_train.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "n_folds=5\n",
    "def fold_cv(model):\n",
    "    kf = KFold(n_folds,shuffle=True,random_state=42).get_n_splits(X_train)\n",
    "    rmse = np.sqrt(-cross_val_score(model,X_train,y_value,scoring=\"neg_mean_squared_error\",cv=kf))\n",
    "    return (rmse)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Base model\n",
    "## Lasso Regression\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Alphas VS CV_scores')"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1120d8ac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "alphas=np.logspace(-4,-3,50)\n",
    "test_scores=[]\n",
    "for alpha in alphas:\n",
    "    lasso = make_pipeline(RobustScaler(),Lasso(alpha,random_state=1))\n",
    "    test_score = fold_cv(lasso)\n",
    "    test_scores.append(np.mean(test_score))\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(alphas,test_scores)\n",
    "plt.xlabel('Alphas')\n",
    "plt.ylabel('test_scores')\n",
    "plt.title('Alphas VS CV_scores')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "lasso = make_pipeline(RobustScaler(),Lasso(alpha=0.0006,random_state=1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Elastic Net Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.\n",
      "  ConvergenceWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'L1_ratio VS CV_scores')"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1193608d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "L1_ros=np.logspace(-1,0,50)\n",
    "test_scores=[]\n",
    "for ro in L1_ros:\n",
    "    Enet = make_pipeline(RobustScaler(),ElasticNet(alpha=0.0006,l1_ratio=ro,random_state=3))\n",
    "    test_score = fold_cv(Enet)\n",
    "    test_scores.append(np.mean(test_score))\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(L1_ros,test_scores)\n",
    "plt.xlabel('L1_ratio')\n",
    "plt.ylabel('test_scores')\n",
    "plt.title('L1_ratio VS CV_scores')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "ENet = make_pipeline(RobustScaler(),ElasticNet(alpha=0.0006,l1_ratio=0.8,random_state=3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Kernel Ridge Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Alphas VS CV_scores')"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x113247978>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "alphas=np.logspace(-2,-0.5,50)\n",
    "test_scores=[]\n",
    "for alpha in alphas:\n",
    "    KRR = make_pipeline(RobustScaler(),KernelRidge(alpha,kernel='polynomial',degree=2,coef0=2.5))\n",
    "    test_score = fold_cv(KRR) #change\n",
    "    test_scores.append(np.mean(test_score))\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(alphas,test_scores)\n",
    "plt.xlabel('Alphas')\n",
    "plt.ylabel('test_scores')\n",
    "plt.title('Alphas VS CV_scores')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'degrees VS CV_scores')"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11334a588>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "degrees=[1,2,3,4,5,6]\n",
    "test_scores=[]\n",
    "for deg in degrees:\n",
    "    KRR = make_pipeline(RobustScaler(),KernelRidge(alpha=0.13,kernel='polynomial',degree=deg,coef0=2.5))\n",
    "    test_score = fold_cv(KRR) #change\n",
    "    test_scores.append(np.mean(test_score))\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(degrees,test_scores)\n",
    "plt.xlabel('Degrees')\n",
    "plt.ylabel('test_scores')\n",
    "plt.title('degrees VS CV_scores')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "KRR= KernelRidge(alpha=0.13,kernel='polynomial',degree=2,coef0=2.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gradient Boosting Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Depths VS CV_scores')"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1172afbe0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "paras=[1,2,3,4,5,6]\n",
    "test_scores=[]\n",
    "for para in paras:\n",
    "    GBoost = GradientBoostingRegressor(n_estimators=3000,learning_rate=0.05,max_depth=para,max_features='sqrt',\n",
    "                                   min_samples_leaf=15,min_samples_split=10,loss='huber',random_state=5)\n",
    "    test_score = fold_cv(GBoost)\n",
    "    test_scores.append(np.mean(test_score))\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(paras,test_scores)\n",
    "plt.xlabel('Depths')\n",
    "plt.ylabel('test_scores')\n",
    "plt.title('Depths VS CV_scores')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "GBoost = GradientBoostingRegressor(n_estimators=3000,learning_rate=0.05,max_depth=3,max_features='sqrt',\n",
    "                                   min_samples_leaf=15,min_samples_split=10,loss='huber',random_state=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Depths VS CV_scores')"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x117d65d68>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "paras=[1,2,3,4,5,6]\n",
    "test_scores=[]\n",
    "for para in paras:\n",
    "    mode_xgb = xgb.XGBRegressor(colsample_bytree=0.4603,gamma=0.0468,learning_rate=0.05,max_depth=para,min_child_weight=1.78,\n",
    "                           n_estimators=2000,reg_alpha=0.464,reg_lambda=0.8671,subsample=0.5213,silent=1,\n",
    "                           random_state=7,nthread=-1)\n",
    "    test_score = fold_cv(mode_xgb)\n",
    "    test_scores.append(np.mean(test_score))\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(paras,test_scores)\n",
    "plt.xlabel('Depths')\n",
    "plt.ylabel('test_scores')\n",
    "plt.title('Depths VS CV_scores')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "mode_xgb = xgb.XGBRegressor(colsample_bytree=0.4603,gamma=0.0468,learning_rate=0.05,max_depth=2,min_child_weight=1.78,\n",
    "                           n_estimators=2000,reg_alpha=0.464,reg_lambda=0.8671,subsample=0.5213,silent=1,\n",
    "                           random_state=7,nthread=-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'features VS CV_scores')"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11737f470>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "max_features = np.linspace(0.2,0.4,5)\n",
    "test_scores=[]\n",
    "for max_f in max_features:\n",
    "    clf = make_pipeline(RobustScaler(),RandomForestRegressor(n_estimators=200,max_features=max_f))\n",
    "    test_score = fold_cv(clf)\n",
    "    test_scores.append(np.mean(test_score))\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(max_features,test_scores)\n",
    "plt.xlabel('proprotion of features')\n",
    "plt.ylabel('test_scores')\n",
    "plt.title('features VS CV_scores')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "Rd_Fors = make_pipeline(RobustScaler(),RandomForestRegressor(n_estimators=2000,max_features=0.3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Base model scores\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Lasso score:0.1352,(0.0298)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "score = fold_cv(lasso) #orginal  Lasso score:0.1370,(0.0290)\n",
    "print(\"\\n Lasso score:{:.4f},({:.4f})\\n\".format(score.mean(),score.std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Elastic Net Regression score:0.1351,(0.0291)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "score = fold_cv(ENet) #Elastic Net Regression score:0.1517,(0.0282)\n",
    "print(\"\\n Elastic Net Regression score:{:.4f},({:.4f})\\n\".format(score.mean(),score.std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Kernel Ridge Regression:0.1180,(0.0126)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "score = fold_cv(KRR) # Kernel Ridge Regression:0.1223,(0.0141)\n",
    "print(\"\\n Kernel Ridge Regression:{:.4f},({:.4f})\\n\".format(score.mean(),score.std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Gradient Boosting Regression:0.1237,(0.0139)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "score = fold_cv(GBoost)\n",
    "print(\"\\n Gradient Boosting Regression:{:.4f},({:.4f})\\n\".format(score.mean(),score.std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " XGboost:0.1219,(0.0103)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "score = fold_cv(mode_xgb)\n",
    "print(\"\\n XGboost:{:.4f},({:.4f})\\n\".format(score.mean(),score.std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " RandomforestRegressor:0.1372,(0.0103)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "score = fold_cv(Rd_Fors)\n",
    "print(\"\\n RandomforestRegressor:{:.4f},({:.4f})\\n\".format(score.mean(),score.std()))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stacking models\n",
    "simplest stacking approch : average base models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "class AverageModel(BaseEstimator,RegressorMixin,TransformerMixin):\n",
    "    def __init__(self,models):\n",
    "        self.models=models\n",
    "    def fit(self,X,y):\n",
    "        self.models_ = [clone(x) for x in self.models]\n",
    "        for model in self.models_:\n",
    "            model.fit(X,y)\n",
    "        return self\n",
    "    def predict(self,X):\n",
    "        predictions = np.column_stack([model.predict(X) for model in self.models_])\n",
    "        return np.mean(predictions,axis=1)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Average stack:0.1207,(0.0156)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "average_models = AverageModel(models=[ENet,GBoost,KRR,lasso,Rd_Fors]) #original 0.1273,(0.0193)\n",
    "score = fold_cv(average_models)\n",
    "print(\"\\n Average stack:{:.4f},({:.4f})\\n\".format(score.mean(),score.std()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Meta-model\n",
    "Divided data into two set. One is train set, other one is test set\n",
    "For train set, traversing all row data as test set. Then collect them, as a new test set.\n",
    "For test set, averaging all prediction, and finally combine with new test set to make predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n",
    "    def __init__(self, base_models, meta_model, n_folds=5):\n",
    "        self.base_models = base_models\n",
    "        self.meta_model = meta_model\n",
    "        self.n_folds = n_folds\n",
    "   \n",
    "    # We again fit the data on clones of the original models\n",
    "    def fit(self, X, y):\n",
    "        self.base_models_ = [list() for x in self.base_models]\n",
    "        self.meta_model_ = clone(self.meta_model)\n",
    "        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n",
    "        \n",
    "        # Train cloned base models then create out-of-fold predictions\n",
    "        # that are needed to train the cloned meta-model\n",
    "        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n",
    "        for i, model in enumerate(self.base_models):\n",
    "            for train_index, holdout_index in kfold.split(X, y):\n",
    "                instance = clone(model)\n",
    "                self.base_models_[i].append(instance)\n",
    "                instance.fit(X[train_index], y[train_index])\n",
    "                y_pred = instance.predict(X[holdout_index])\n",
    "                out_of_fold_predictions[holdout_index, i] = y_pred\n",
    "                \n",
    "        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n",
    "        self.meta_model_.fit(out_of_fold_predictions, y)\n",
    "        return self\n",
    "   \n",
    "    #Do the predictions of all base models on the test data and use the averaged predictions as \n",
    "    #meta-features for the final prediction which is done by the meta-model\n",
    "    def predict(self, X):\n",
    "        meta_features = np.column_stack([\n",
    "            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n",
    "            for base_models in self.base_models_ ])\n",
    "        return self.meta_model_.predict(meta_features)\n",
    "    \n",
    "\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "stacked_averaged_models = StackingAverageModels(base_models=(ENet,GBoost,KRR),meta_model=lasso)\n",
    "# score = fold_cv(stacked_averaged_models)\n",
    "# print(\"\\n meta_model stack:{:.4f},({:.4f})\\n\".format(score.mean(),score.std()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ensembling StackedRegressor, XGboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rmsle(y,y_pred):\n",
    "    return np.sqrt(mean_squared_error(y,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final Training and prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.07557022405238346\n"
     ]
    }
   ],
   "source": [
    "stacked_averaged_models.fit(X_train,y_value)\n",
    "stacked_train_pred = stacked_averaged_models.predict(X_train)\n",
    "stacked_pre = np.expm1(stacked_averaged_models.predict(X_test))\n",
    "print(rmsle(y_value,stacked_train_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.08618329403928343\n"
     ]
    }
   ],
   "source": [
    "mode_xgb.fit(X_train,y_value)\n",
    "xgb_train_pred = mode_xgb.predict(X_train)\n",
    "xgb_pre = np.expm1(mode_xgb.predict(X_test))\n",
    "print(rmsle(y_value,xgb_train_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KRR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.08349933868893109\n"
     ]
    }
   ],
   "source": [
    "KRR.fit(X_train,y_value)\n",
    "KRR_train_pred = KRR.predict(X_train)\n",
    "KRR_pre =np.expm1(KRR.predict(X_test))\n",
    "print(rmsle(y_value,KRR_train_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSLE score on train data:\n",
      "0.07549487696504463\n"
     ]
    }
   ],
   "source": [
    "print('RMSLE score on train data:')\n",
    "print(rmsle(y_value,stacked_train_pred*0.8 +\n",
    "               xgb_train_pred*0.2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ensemble = stacked_pre*0.7+xgb_pre*0.15+KRR_pre*0.15\n",
    "ensemble = stacked_pre*0.8+xgb_pre*0.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission = pd.DataFrame(data={'Id':test_data.index,'SalePrice':ensemble})\n",
    "submission.to_csv(\"submission.csv\",index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
